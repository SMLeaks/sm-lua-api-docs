{
	"namespace": "sm.visualization",
	"userdata_association": "BlueprintVisualization",
	"doc": {
		"text": [
			"<strong>Visualization</strong> is used for visualizing game objects."
		]
	},
	"constants": [],
	"functions": [
		{
			"name": "createBlueprint",
			"doc": {
				"text": [
					"Create a [BlueprintVisualization] from a blueprint file path."
				],
				"params": [
					[
						"string",
						"path",
						"A file path to the blueprint to be visualized"
					]
				],
				"return": [
					[
						"[BlueprintVisualization]",
						"The blueprint visualization"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "createBlueprint",
			"doc": {
				"text": [
					"Create a [BlueprintVisualization] from a blueprint table."
				],
				"params": [
					[
						"table",
						"blueprintTable",
						"Table with blueprint information to be visualized"
					]
				],
				"return": [
					[
						"[BlueprintVisualization]",
						"The blueprint visualization"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "createBuilderGuide",
			"doc": {
				"text": [
					"Create a builder guide [BlueprintVisualization], comparing the creation from the root [Shape] to the blueprint give by path.",
					"The builder guide blueprint contains stage indices based on shape color, stage color order is the same as the color order in the PaintTool color picker."
				],
				"params": [
					[
						"string",
						"path",
						"A file path to the builder guide blueprint"
					],
					[
						"[Shape]",
						"shape",
						"Root [Shape] for comparing the creation from"
					],
					[
						"boolean",
						"ignoreBlockUuid=false",
						"Should block uuid be evaluated for stage completion"
					],
					[
						"string",
						"completeEffectName=\"\"",
						"The name a effect that should be played once the builder guide is completed"
					]
				],
				"return": [
					[
						"[BlueprintVisualization]",
						"The builder guide blueprint visualization"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "getShapePlacementVisualization",
			"doc": {
				"text": [
					"Returns a table containing the current state of the shape placement visualization."
				],
				"return": [
					[
						"table",
						"Table containing { worldPosition = [Vec3], worldRotation = [Quat], shapeUuid = [Uuid], isLegal = boolean }."
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setBlockVisualization",
			"doc": {
				"text": [
					"Visualizes a block on a shape"
				],
				"params": [
					[
						"[Vec3]",
						"position",
						"The local space position"
					],
					[
						"boolean",
						"illegal=false",
						"Whether the visualization should render as illegal"
					],
					[
						"[Shape]",
						"shape",
						"Shape to visualize on"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setBlockVisualization",
			"doc": {
				"text": [
					"Visualizes a block on a joint"
				],
				"params": [
					[
						"[Vec3]",
						"position",
						"The local space position"
					],
					[
						"boolean",
						"illegal=false",
						"Whether the visualization should render as illegal"
					],
					[
						"[Joint]",
						"joint",
						"joint to visualize on"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setBlockVisualization",
			"doc": {
				"text": [
					"Visualizes a block in world space"
				],
				"params": [
					[
						"[Vec3]",
						"position",
						"The world space position"
					],
					[
						"boolean",
						"illegal=false",
						"Whether the visualization should render as illegal"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setCreationBodies",
			"doc": {
				"text": [
					"Sets an array of bodies to visualize."
				],
				"params": [
					[
						"table",
						"bodies",
						"Array of bodies to visualize {[Body], ..}."
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setCreationFreePlacement",
			"doc": {
				"text": [
					"Controls the transform of the creation visualization. If true the visualization will render using setFreePlacementPosition/setFreePlacementRotation functions.",
					"If false the visualization will render on top of the creation."
				],
				"params": [
					[
						"boolean",
						"valid",
						"Should the creation visualization be free placement"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setCreationFreePlacementPosition",
			"doc": {
				"text": [
					"Set the world position of the creation visualization. Only works if setFreePlacement is true."
				],
				"params": [
					[
						"[Vec3]",
						"position",
						"World position of the creation visualization"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setCreationFreePlacementRotation",
			"doc": {
				"text": [
					"Set the rotation index of the creation visualization. Only works if setFreePlacement is true."
				],
				"params": [
					[
						"integer",
						"index",
						"Index to rotate the creation visualization with"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setCreationValid",
			"doc": {
				"text": [
					"Controls the rendering of the creation visualization. "
				],
				"params": [
					[
						"boolean",
						"valid",
						"Should the visualization should render be valid"
					],
					[
						"boolean",
						"lift=false",
						"Should the visualization should render be lift or place"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setCreationVisible",
			"doc": {
				"text": [
					"Controls the visibility of the creation visualization"
				],
				"params": [
					[
						"boolean",
						"visible",
						"Should the creation visualization be visible"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setLiftLevel",
			"doc": {
				"text": [
					"Set the lift level of the lift visualization."
				],
				"params": [
					[
						"integer",
						"level",
						"The level of the lift"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setLiftPosition",
			"doc": {
				"text": [
					"Set the world position of the lift visualization."
				],
				"params": [
					[
						"[Vec3]",
						"position",
						"World position of the lift visualization"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setLiftValid",
			"doc": {
				"text": [
					"Controls the rendering of the lift visualization. "
				],
				"params": [
					[
						"boolean",
						"valid",
						"Whether the visualization should render as valid"
					]
				],
				"client_only": true
			}
		},
		{
			"name": "setLiftVisible",
			"doc": {
				"text": [
					"Controls the visibility of the lift visualization"
				],
				"params": [
					[
						"boolean",
						"visible",
						"Whether the lift visualization is visible"
					]
				],
				"client_only": true
			}
		}
	]
}